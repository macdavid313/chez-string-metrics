;;;; test.ss

(import (chezscheme)
        (srfi s78 lightweight-testing)
        (string-metrics))

(check-set-mode! 'report)

;; Hamming distance
(check (hamming "karolin" "kathrin") => 3)
(check (hamming "kathrin" "karolin") => 3)
(check (hamming "karolin" "kerstin") => 3)
(check (hamming "kerstin" "karolin") => 3)
(check (hamming "1011101" "1001001") => 2)
(check (hamming "1001001" "1011101") => 2)
(check (hamming "2173896" "2233796") => 3)
(check (hamming "2233796" "2173896") => 3)
(check (hamming "toned" "roses") => 3)
(check (hamming "roses" "toned") => 3)
(check (hamming "red" "wax") => 3)
(check (hamming "wax" "red") => 3)
(check (hamming "lucky" "lucky") => 0)
(check (hamming "" "") => 0)

;; Levenshtein distance
(check (levenshtein "kitten" "sitting") => 3)
(check (levenshtein "sitting" "kitten") => 3)
(check (levenshtein "cake" "drake") => 2)
(check (levenshtein "drake" "cake") => 2)
(check (levenshtein "saturday" "sunday") => 3)
(check (levenshtein "sunday" "saturday") => 3)
(check (levenshtein "red" "wax") => 3)
(check (levenshtein "wax" "red") => 3)
(check (levenshtein "lucky" "lucky") => 0)
(check (levenshtein "" "") => 0)

;; Normalized Levenshtein distance
(check (norm-levenshtein "kitten" "sitting") => (exact->inexact 4/7))
(check (norm-levenshtein "sitting" "kitten") => (exact->inexact 4/7))
(check (norm-levenshtein "cake" "drake") => (exact->inexact 3/5))
(check (norm-levenshtein "drake" "cake") => (exact->inexact 3/5))
(check (norm-levenshtein "saturday" "sunday") => (exact->inexact 5/8))
(check (norm-levenshtein "sunday" "saturday") => (exact->inexact 5/8))
(check (norm-levenshtein "red" "wax") => (exact->inexact 0))
(check (norm-levenshtein "wax" "red") => (exact->inexact 0))
(check (norm-levenshtein "lucky" "lucky") => (exact->inexact 1))
(check (norm-levenshtein "" "") => (exact->inexact 1))

;; Damerau-Levenshtein distance
(check (damerau-levenshtein "veryvery long" "very long") => 4)
(check (damerau-levenshtein "very long" "veryvery long") => 4)
(check (damerau-levenshtein "thing" "think") => 1)
(check (damerau-levenshtein "think" "thing") => 1)
(check (damerau-levenshtein "nose" "ones") => 2)
(check (damerau-levenshtein "ones" "nose") => 2)
(check (damerau-levenshtein "thing" "sign") => 3)
(check (damerau-levenshtein "sign" "thing") => 3)
(check (damerau-levenshtein "red" "wax") => 3)
(check (damerau-levenshtein "wax" "red") => 3)
(check (damerau-levenshtein "lucky" "lucky") => 0)
(check (damerau-levenshtein "" "") => 0)

;; Normalized Damerau-Levenshtein distance
(check (norm-damerau-levenshtein "veryvery long" "very long") => (exact->inexact 9/13))
(check (norm-damerau-levenshtein "very long" "veryvery long") => (exact->inexact 9/13))
(check (norm-damerau-levenshtein "thing" "think") => (exact->inexact 4/5 ))
(check (norm-damerau-levenshtein "think" "thing") => (exact->inexact 4/5))
(check (norm-damerau-levenshtein "nose" "ones") => (exact->inexact 1/2))
(check (norm-damerau-levenshtein "ones" "nose") => (exact->inexact 1/2))
(check (norm-damerau-levenshtein "thing" "sign") => (exact->inexact 2/5))
(check (norm-damerau-levenshtein "sign" "thing") => (exact->inexact 2/5))
(check (norm-damerau-levenshtein "red" "wax") => (exact->inexact 0))
(check (norm-damerau-levenshtein "wax" "red") => (exact->inexact 0))
(check (norm-damerau-levenshtein "lucky" "lucky") => (exact->inexact 1))
(check (norm-damerau-levenshtein "" "") => (exact->inexact 1))

;; Jaccard similarity coefficient
(check (jaccard "xxx" "xyx") => 1/2)
(check (jaccard "night" "nacht") => 3/7)
(check (jaccard "nacht" "night") => 3/7)
(check (jaccard "context" "contact") => 5/9)
(check (jaccard "context" "contact") => 5/9)
(check (jaccard "lucky" "lucky") => 1)
(check (jaccard "" "") => 1)

;; Overlap coefficient
(check (overlap "fly" "butterfly") => 1)
(check (overlap "butterfly" "fly") => 1)
(check (overlap "night" "nacht") => 3/5)
(check (overlap "nacht" "night") => 3/5)
(check (overlap "context" "contact") => 5/7)
(check (overlap "contact" "context") => 5/7)
(check (overlap "red" "wax") => 0)
(check (overlap "wax" "red") => 0)
(check (overlap "lucky" "lucky") => 1)

;; Jaro distance
(check (jaro "aa" "a") => (exact->inexact 5/6))
(check (jaro "a" "aa") => (exact->inexact 5/6))
(check (jaro "martha" "marhta") => (exact->inexact 17/18))
(check (jaro "dwayne" "duane") => (exact->inexact 37/45))
(check (jaro "dixon" "dicksonx") => (exact->inexact 23/30))
(check (jaro "jones" "johnson") => (exact->inexact 83/105))
(check (jaro "brain" "brian") => (exact->inexact 14/15))
(check (jaro "five" "ten") => (exact->inexact 0))
(check (jaro "lucky" "lucky") => (exact->inexact 1))
(check (jaro "" "") => (exact->inexact 0))

;; Jaro-Winkler distance
(check (jaro-winkler "aa" "a") => (exact->inexact 17/20))
(check (jaro-winkler "a" "aa") => (exact->inexact 17/20))
(check (jaro-winkler "martha" "marhta") => (exact->inexact 173/180))
(check (jaro-winkler "dwayne" "duane") => (exact->inexact 21/25))
(check (jaro-winkler "dixon" "dicksonx") => (exact->inexact 61/75))
(check (jaro-winkler "jones" "johnson") => (exact->inexact 437/525))
(check (jaro-winkler "brain" "brian") => (exact->inexact 71/75))
(check (jaro-winkler "five" "ten") => (exact->inexact 0))
(check (jaro-winkler "lucky" "lucky") => (exact->inexact 1))
(check (jaro-winkler "" "") => (exact->inexact 0))

(check-report)
